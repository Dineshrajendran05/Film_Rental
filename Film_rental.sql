#1) What is the total revenue generated from all rentals in the database?

select * from rental;
select * from payment;

select sum(p.amount) as total_revenue from payment p
join rental r on r.rental_id = p.rental_id;

#2) How many rentals were made in each month_name?

select * from rental;
select monthname(rental_date) as month,count(*) as count from rental
group by month;

#3.	What is the rental rate of the film with the longest title in the database?

select * from film;

select char_length(title) as longest_title,title,rental_rate from film
where char_length(title) in (select max(char_length(title)) from film);

#4.	What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? 

select * from rental;
select * from film;
select * from inventory;

select avg(f.rental_rate) as average from rental r
join inventory i on i.inventory_id = r.inventory_id
join film f on f.film_id = i.film_id
where date(rental_date) between '2005-05-05 22:04:30' and '2005-05-06 22:04:30' + interval 29 day;

#5.	What is the most popular category of films in terms of the number of rentals?
select * from film;
select * from film_category;
select * from category;

select c.name,count(*) as popular from rental r 
join inventory i on i.inventory_id = r.inventory_id
join film f on f.film_id = i.film_id
join film_category fc on fc.film_id = f.film_id
join category c on c.category_id = fc.category_id
group by c.name
order by popular desc
limit 1;

#6.	Find the longest movie duration from the list of films that have not been rented by any customer
select * from film;
select * from inventory;
select max(length) as maximum, title from film 
where film_id not in (select film_id from inventory i
						join rental r on r.inventory_id= i.inventory_id)
group by title
order by maximum desc
limit 1;

#7.	What is the average rental rate for films, broken down by category?

select c.name,avg(f.rental_rate) as average_rate from category c
join film_category fc on fc.category_id = c.category_id
join film f on f.film_id = fc.film_id
group by c.name;

#8.	What is the total revenue generated from rentals for each actor in the database?

select a.actor_id, concat_ws(" ",a.first_name,a.last_name) as name, sum(p.amount) as total_revenue from actor a
join film_actor fa on fa.actor_id = a.actor_id
join film f on f.film_id = fa.film_id
join inventory i on i.film_id = f.film_id
join rental r on r.inventory_id = i.inventory_id
join payment p on p.rental_id = r.rental_id
group by name,a.actor_id;

#9.	Show all the actresses who worked in a film having a "Wrestler" in the description

select * from actor;
select * from film;

select concat_ws(" ",a.first_name,a.last_name) as name, f.description from actor a
join film_actor fa on fa.actor_id = a.actor_id
join film f on f.film_id = fa.film_id
where f.description like '%Wrestler%' ; 

#10.	Which customers have rented the same film more than once? 

select concat_ws(" ",c.first_name,last_name) as name , f.title, count(*) as rented from customer c
join rental r on r.customer_id = c.customer_id
join inventory i on i.inventory_id = r.inventory_id
join film f on f.film_id = i.film_id
group by name, f.title
having rented > 1;

#11.	How many films in the comedy category have a rental rate higher than the average rental rate?

select name from category;

select count(*) as no_of_film from film f
join film_category fc on fc.film_id = f.film_id
join category c on c.category_id = fc.category_id
where c.name = 'comedy' and f.rental_rate > (select avg(rental_rate) from film);

#12.	Which films have been rented the most by customers living in each city?

select city,title from (
select city,title,rank() over(partition by city order by rented desc) as rent from(
select c.city,f.title,count(*) as rented from city c
join address a on a.city_id = c.city_id
join customer cs on cs.address_id = a.address_id
join rental r on r.customer_id = cs.customer_id
join inventory i on i.inventory_id = r.inventory_id
join film f on f.film_id = i.film_id
group by c.city,f.title) a) b
where rent = 1;

#13.	What is the total amount spent by customers whose rental payments exceed $200?

select concat_ws(" ",c.first_name,c.last_name) as name, sum(p.amount) as total_spent from customer c
join payment p on p.customer_id = c.customer_id
group by name
having total_spent > 200;

#14.	Display the fields which are having foreign key constraints related to the "rental" table.

Select Column_name,
Referenced_table_name,
Referenced_column_name from
INFORMATION_SCHEMA.KEY_COLUMN_USAGE
Where REFERENCED_TABLE_SCHEMA = 'film_rental' and TABLE_NAME = 'rental'; 

#15.	Create a View for the total revenue generated by each staff member, broken down by store city with the country name

create view total_revenue as 
select co.country,c.city,concat_ws(" ",s.first_name,s.last_name) as name,sum(p.amount) as Total_amount from country co
join city c on c.country_id = co.country_id
join address a on a.city_id = c.city_id
join staff s on s.address_id = a.address_id
join payment p on p.staff_id = s.staff_id
group by 1,2,3;

select * from total_revenue;

#16.	Create a view based on rental information consisting of visiting_day, customer_name, the title of the film, 
# no_of_rental_days, the amount paid by the customer along with the percentage of customer spending

select * from rental;
create view rental_information as 
select concat_ws(" ",c.first_name,c.last_name) as name,dayname(r.rental_date) as day, f.title, 
datediff(r.return_date,r.rental_date) as no_of_rental_days, p.amount,
p.amount*100/sum(p.amount) over(partition by concat_ws(" ",c.first_name,c.last_name)) as percentage_of_customer_spending from customer c
join rental r on r.customer_id = c.customer_id 
join payment p on p.rental_id = r.rental_id
join inventory i on i.inventory_id = r.inventory_id
join film f on f.film_id = i.film_id;

select * from rental_information;

#17.	Display the customers who paid 50% of their total rental costs within one day

select concat(c.first_name,c.last_name) as customer_name,sum(p.amount),p.payment_date
from customer c join payment p on c.customer_id = p.customer_id
where date_add(p.payment_date, interval 1 day)
group by 1,3 having sum(p.amount) >= (select sum(amount)/2 from payment);

